#!/usr/bin/env python3
import zmq
import argparse
import random
import sys
import time
import json
import logging
from collections import deque
#from IPython import embed
import configparser

from sortlib.HardwareInterface import HardwareInterface

QUEUE_LEN = 3


def main(args, logger):
    active_ts = deque()
    hwi = HardwareInterface(
        port=args.serial_port, motor_offsets=args.motor_offsets
    )
    hwi.start()

    context = zmq.Context()
    master = context.socket(zmq.PUB)
    master.bind("tcp://*:5556")
    master.setsockopt(zmq.LINGER, 0)

    monitor = context.socket(zmq.PULL)
    monitor.bind("tcp://*:5559")
    monitor.setsockopt(zmq.LINGER, 0)

    time.sleep(1)
    while True:
        time.sleep(0.1)
        # Use a string to avoid any chance of FPE
        ts = str(time.time())
        active_ts.appendleft(ts)
        msg = json.dumps(
            {"timestamp": "{}".format(ts), "control": "RUN", "label": "good"}
        )
        logger.info
        master.send_string(msg)

        logger.info("Master message sent: {}.".format(msg))
        # If we should have a finished image acquisition,
        # check for the signal from the image processor
        if len(active_ts) >= QUEUE_LEN:
            logger.info("Waiting for monitor message...")
            mon_msg = monitor.recv_json()
            logger.info("Monitor message received: {}".format(mon_msg))
            rcvd_ts = mon_msg["timestamp"]
            label = mon_msg["label"]
            out_ts = active_ts.pop()
            if out_ts != rcvd_ts:
                logging.error(
                    "Timestamps mis-aligned: received {}, expected {}.".format(
                        rcvd_ts, out_ts
                    )
                )
                # Check if we somehow missed a monitor message, in which
                # case we should simply ditch the current item to be sorted
                if active_ts.count(ts) > 0:
                    logging.error(
                        "Received TS is active but not at end of queue."
                    )
                    label = "UNK"
                # Otherwise we likely received a stale TS
                else:
                    # raise ValueError("Received non-active TS: {}".format(rcvd_ts))
                    logging.error(
                        "Received ts not in active timestamps: {}".format(
                            rcvd_ts
                        )
                    )
                    label = "UNK"
            else:
                logging.info("Received correct ts: {}".format(rcvd_ts))
        else:
            logging.info(
                "Advancing empty element, queue len: {}".format(len(active_ts))
            )
            label = ""
        # Command the sorting mechanism with the given class and advance the line
        logging.info("Setting sort to {} and advancing line.".format(label))
        hwi.sort_and_advance(label)
        logger.info("Waiting on servo arrival...")
        while not hwi.servos_arrived:
            time.sleep(0.05)
        # Activate elevator
        logger.info("Activating and waiting for elevator.")
        while not hwi.elevator_arrived:
            time.sleep(0.05)
        hwi.sorter_ready = True
        logger.info("Elevator arrived.")
        time.sleep(0.25)  # Make sure everything is stabilized


def parse_args():
    parser = argparse.ArgumentParser(
        description="Grab camera images and forward to sink."
    )

    parser.add_argument("-c", "--config_file", default="/etc/thingsorter.conf")
    parser.add_argument("--log_level", default="DEBUG")
    args = parser.parse_args()

    config = configparser.ConfigParser()
    config.read(args.config_file)
    args.master_address = config["addresses"]["master_address"]
    args.monitor_address = config["addresses"]["monitor_address"]
    args.motor_offsets = dict(
        (
            (idx, tuple(map(int, line.split(","))))
            for idx, line in enumerate(
                config["calibration"]["motor_offsets"].split("\n")
            )
        )
    )
    args.serial_port = config["addresses"]["serial_port"]
    args.baudrate = config["addresses"]["baudrate"]
    return args


if __name__ == "__main__":
    args = parse_args()
    logger = logging.getLogger("master")
    numeric_level = getattr(logging, args.log_level.upper())
    if not isinstance(numeric_level, int):
        raise ValueError("Invalid log level: {}".format(args.log_level))
    try:
        import coloredlogs

        coloredlogs.install(level=numeric_level)
    except ImportError:
        logging.basicConfig(level=numeric_level)
    logger.info("Starting main...")
    main(args, logger)
